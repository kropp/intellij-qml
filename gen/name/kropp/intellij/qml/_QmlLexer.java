/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package name.kropp.intellij.qml;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import name.kropp.intellij.qml.psi.QmlTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static name.kropp.intellij.qml.psi.QmlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>qml.flex</tt>
 */
public class _QmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IMPORT = 2;
  public static final int PROPERTYVALUE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16912 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\5\21\1\70\11\21\1\71\1\72\1\73\1\74\1\21\1\75\2\21\1\76\3\21\1\77\2\21\1"+
    "\100\10\21\123\25\1\101\7\25\1\102\1\103\12\25\1\104\24\21\1\25\1\105\u0582"+
    "\21\1\106\u017f\21");

  /* The ZZ_CMAP_Y table has 4544 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\5\0\1\16"+
    "\1\17\1\16\2\20\1\21\3\20\1\21\71\20\1\22\1\20\1\23\1\0\1\24\1\25\2\0\16\26"+
    "\1\27\1\30\1\31\1\32\2\20\1\33\11\20\1\34\21\20\1\35\1\36\24\20\1\37\3\20"+
    "\1\21\1\40\1\37\4\20\1\0\1\41\4\26\1\42\1\43\1\0\3\20\2\44\3\0\1\26\1\45\5"+
    "\20\1\46\3\26\1\47\1\50\13\20\1\51\1\52\1\53\1\54\1\26\1\55\2\0\1\56\3\20"+
    "\3\26\1\57\12\20\1\60\1\26\1\61\1\0\1\26\1\62\3\20\1\46\1\63\1\16\2\20\1\60"+
    "\1\64\1\65\1\66\2\0\3\20\1\67\10\0\2\20\1\27\1\70\2\0\1\71\1\26\1\72\3\26"+
    "\1\73\6\20\1\74\2\26\1\75\1\20\1\76\1\26\1\37\1\20\1\77\1\100\1\101\2\20\1"+
    "\102\1\103\1\104\1\52\1\105\1\106\1\107\1\76\1\26\1\23\1\0\1\110\1\111\1\101"+
    "\2\20\1\102\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\26\1\121\1\0\1\110"+
    "\1\34\1\33\2\20\1\102\1\122\1\104\1\42\1\123\1\124\1\0\1\76\1\26\1\0\1\40"+
    "\1\110\1\100\1\101\2\20\1\102\1\122\1\104\1\52\1\115\1\120\1\107\1\76\1\26"+
    "\1\40\1\0\1\125\1\126\1\127\1\130\1\131\1\126\1\20\1\132\1\133\1\134\1\135"+
    "\1\0\1\120\1\26\2\0\1\136\1\27\1\102\2\20\1\102\1\20\1\137\1\140\1\134\1\141"+
    "\1\44\1\76\1\26\2\0\1\77\1\27\1\102\2\20\1\102\1\142\1\104\1\140\1\134\1\141"+
    "\1\31\1\76\1\26\1\143\1\0\1\110\1\27\1\102\4\20\1\144\1\140\1\145\1\146\1"+
    "\147\1\76\1\26\1\0\1\36\1\150\1\20\1\21\1\36\2\20\1\33\1\151\1\21\1\152\1"+
    "\153\1\26\1\120\1\26\1\154\1\0\1\37\5\20\1\155\1\45\1\156\1\157\1\26\1\160"+
    "\4\0\1\161\1\162\1\163\1\37\1\164\1\165\1\155\1\166\1\167\1\170\1\26\1\171"+
    "\4\0\1\124\2\0\1\160\1\26\1\160\1\172\1\173\1\20\1\37\3\20\1\24\1\41\1\26"+
    "\1\140\1\174\1\26\1\41\3\26\1\175\1\176\7\0\5\20\1\46\1\26\1\177\1\26\1\160"+
    "\1\60\1\200\1\201\1\202\1\203\1\20\1\204\1\205\1\26\1\170\4\20\1\34\1\17\5"+
    "\20\1\206\51\20\1\127\1\21\1\127\5\20\1\127\4\20\1\127\1\21\1\127\1\20\1\21"+
    "\7\20\1\127\10\20\1\207\4\0\2\20\2\0\12\20\2\70\1\37\114\20\1\100\2\20\1\37"+
    "\2\20\1\44\11\20\1\126\1\20\1\124\1\20\1\27\1\210\1\0\2\20\1\210\1\0\2\20"+
    "\1\211\1\0\1\20\1\27\1\212\1\0\6\20\1\213\3\26\1\214\1\215\1\26\1\160\3\0"+
    "\1\216\1\26\1\160\13\20\1\0\1\217\4\20\1\220\10\20\1\70\1\0\3\20\1\21\1\26"+
    "\1\221\1\26\1\221\1\120\1\26\3\20\1\70\1\24\1\0\5\20\1\222\3\20\1\23\1\26"+
    "\1\160\4\0\2\20\1\156\1\221\6\20\1\174\1\157\3\26\1\52\1\26\1\160\1\26\1\160"+
    "\1\147\1\0\1\26\1\170\10\0\1\223\5\20\1\213\1\26\1\223\1\222\1\26\1\160\1"+
    "\0\1\224\1\221\1\0\1\225\3\20\1\75\1\202\1\26\1\62\4\20\1\60\1\26\1\221\1"+
    "\0\4\20\1\213\2\26\1\0\1\26\1\226\1\26\1\62\3\20\1\70\1\20\1\124\10\0\1\227"+
    "\2\26\1\230\1\231\1\160\30\20\6\26\1\170\1\224\42\20\2\70\4\20\2\70\1\20\1"+
    "\232\3\20\1\70\6\20\1\27\1\167\1\233\1\24\1\234\1\222\1\20\1\24\1\233\1\24"+
    "\16\0\1\40\1\147\2\0\1\20\1\24\6\0\1\26\1\175\1\235\1\26\1\236\1\0\1\237\1"+
    "\36\1\151\1\240\1\25\1\241\1\20\1\242\1\243\1\244\2\0\5\20\1\124\116\0\5\20"+
    "\1\21\5\20\1\21\20\20\1\24\1\245\1\246\1\0\4\20\1\34\1\17\7\20\1\147\1\0\1"+
    "\106\2\20\1\21\1\0\10\21\4\26\5\0\1\147\72\0\1\243\3\0\1\37\1\204\1\240\1"+
    "\24\1\37\11\20\1\21\1\247\1\37\12\20\1\206\1\243\4\20\1\70\1\37\12\20\1\21"+
    "\2\0\3\20\1\44\6\0\170\20\1\70\11\0\72\20\1\70\5\0\21\20\1\24\10\0\5\20\1"+
    "\70\41\20\1\24\2\20\1\26\1\246\2\0\5\20\1\156\1\71\1\250\3\20\1\60\12\20\1"+
    "\160\3\0\1\147\1\20\1\36\14\20\1\101\3\20\1\21\1\20\7\0\1\147\1\20\1\251\1"+
    "\252\2\20\1\46\3\0\6\20\1\222\1\0\1\62\5\20\1\213\1\26\1\170\1\0\1\26\1\160"+
    "\2\26\1\62\1\253\1\26\1\62\2\20\1\60\1\170\2\20\1\156\1\26\1\221\1\0\3\20"+
    "\1\24\1\73\5\20\1\46\1\26\1\236\1\147\1\26\1\160\1\254\1\20\1\26\1\255\5\20"+
    "\1\75\1\157\1\0\1\252\1\256\1\26\1\160\2\20\1\21\1\257\6\20\1\201\1\260\1"+
    "\220\2\0\1\261\1\20\1\46\1\262\1\0\3\263\1\0\2\21\5\20\1\206\1\70\1\0\16\20"+
    "\1\46\1\264\1\26\1\160\64\20\1\222\1\0\2\20\1\21\1\265\5\20\1\222\40\0\55"+
    "\20\1\70\15\20\1\23\4\0\1\21\1\0\1\265\1\266\1\20\1\102\1\21\1\167\1\267\15"+
    "\20\1\23\3\0\1\265\54\20\1\70\2\0\10\20\1\36\6\20\5\0\1\20\1\222\2\26\2\0"+
    "\2\26\10\0\1\27\20\20\1\24\2\0\1\26\1\160\1\37\2\20\1\44\1\37\2\20\1\44\1"+
    "\270\12\20\1\21\3\36\1\271\4\0\1\20\1\142\2\20\1\21\2\20\1\272\1\20\1\70\1"+
    "\20\1\70\4\0\17\20\1\44\10\0\6\20\1\24\20\0\1\273\20\0\3\20\1\24\6\20\1\124"+
    "\1\0\1\236\3\0\4\20\2\0\3\20\1\44\4\20\1\60\1\45\3\20\1\70\4\20\1\222\1\20"+
    "\1\240\5\0\23\20\1\70\1\26\1\160\4\20\1\222\4\20\1\222\5\20\1\0\6\20\1\222"+
    "\23\0\46\20\1\21\1\0\2\20\1\70\1\0\1\20\23\0\1\70\1\102\4\20\1\34\1\274\2"+
    "\20\1\70\1\0\2\20\1\21\1\0\3\20\1\21\10\0\2\20\1\275\1\0\2\20\1\70\1\0\3\20"+
    "\1\23\10\0\7\20\1\270\10\0\1\276\1\71\1\142\1\37\2\20\1\222\1\114\4\0\3\20"+
    "\1\24\3\20\1\24\4\0\1\20\1\37\2\20\1\277\3\0\6\20\1\70\1\0\2\20\1\70\1\0\2"+
    "\20\1\44\1\0\2\20\1\23\15\0\11\20\1\124\6\0\6\20\1\44\1\0\6\20\1\44\41\0\1"+
    "\225\6\20\1\26\1\157\3\0\1\120\1\26\1\0\1\106\1\225\5\20\1\26\1\45\2\0\3\20"+
    "\1\124\1\26\1\160\1\225\3\20\1\156\1\26\1\140\1\26\2\0\4\20\1\300\1\0\1\225"+
    "\5\20\1\46\1\26\1\301\1\302\1\26\1\303\4\0\2\20\1\33\2\20\1\213\1\26\1\176"+
    "\10\0\1\21\1\241\1\20\1\34\1\20\1\124\5\20\1\156\1\26\1\45\1\26\1\160\1\136"+
    "\1\100\1\101\2\20\1\102\1\122\1\104\1\52\1\115\1\135\1\243\1\76\2\175\21\0"+
    "\6\20\1\174\1\26\1\177\1\44\1\26\1\160\4\0\6\20\2\26\1\304\1\0\1\26\1\160"+
    "\24\0\5\20\1\156\1\170\1\26\1\236\2\0\1\256\4\0\6\20\2\26\1\305\1\0\1\26\1"+
    "\160\4\0\5\20\1\46\1\26\1\0\1\26\1\160\6\0\3\20\1\306\1\26\1\221\1\26\1\160"+
    "\54\0\10\20\1\26\1\160\1\0\1\147\70\0\7\20\1\124\40\0\1\20\1\102\3\20\1\156"+
    "\1\157\1\26\1\124\1\0\1\26\1\160\2\0\1\36\3\20\1\307\2\26\1\41\1\157\51\0"+
    "\63\20\1\23\14\0\15\20\1\21\2\0\30\20\1\222\27\0\5\20\1\21\72\0\10\20\1\21"+
    "\67\0\7\20\1\124\3\20\1\21\1\26\1\160\14\0\3\20\1\70\1\175\1\0\6\20\1\157"+
    "\1\0\1\222\1\0\1\26\1\160\1\265\2\20\1\243\2\20\56\0\10\20\1\24\1\0\1\75\4"+
    "\26\1\157\1\0\1\106\1\225\1\20\10\0\1\124\3\0\75\20\1\24\2\0\36\20\1\44\41"+
    "\0\1\23\77\0\15\20\1\44\1\20\1\24\1\20\1\124\1\20\1\310\130\0\1\311\1\312"+
    "\1\45\1\224\1\313\1\221\3\0\1\314\22\0\1\302\67\0\12\20\1\27\10\20\1\27\1"+
    "\315\1\316\1\20\1\317\1\142\7\20\1\34\1\320\2\27\3\20\1\321\1\167\1\36\1\102"+
    "\51\20\1\70\3\20\1\102\2\20\1\206\3\20\1\206\2\20\1\27\3\20\1\27\2\20\1\21"+
    "\3\20\1\21\3\20\1\102\3\20\1\102\2\20\1\206\1\322\14\26\1\157\1\224\5\26\1"+
    "\175\1\273\1\0\1\323\2\0\1\224\1\41\1\26\52\0\1\157\2\26\1\324\1\325\1\45"+
    "\72\0\30\20\1\24\1\0\1\157\5\0\10\20\1\213\1\45\1\26\1\160\24\0\1\142\3\20"+
    "\1\161\1\37\1\206\1\326\1\237\1\327\1\161\1\232\1\161\2\206\1\117\1\20\1\33"+
    "\1\20\1\222\1\330\1\33\1\20\1\222\50\0\32\20\1\21\5\0\106\20\1\24\1\0\33\20"+
    "\1\70\120\20\1\23\53\0\3\20\1\70\134\0\36\26\2\0");

  /* The ZZ_CMAP_A table has 1736 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\2\5\0\1\4\1\53\1\5\1\0\1\50\1\0\1\53\1\6\1\41\1\42\1\3\1\53\1"+
    "\45\1\53\1\47\1\1\12\46\1\43\1\44\3\53\1\7\1\0\22\51\1\34\7\51\1\37\1\0\1"+
    "\40\1\0\1\50\1\0\1\17\1\33\1\32\1\25\1\23\1\24\1\31\1\51\1\11\2\51\1\20\1"+
    "\12\1\30\1\14\1\13\1\51\1\15\1\21\1\16\1\22\1\27\2\51\1\26\1\51\1\35\1\0\1"+
    "\36\4\0\1\50\12\0\1\50\2\0\17\50\1\0\2\50\4\0\4\50\6\0\5\50\7\0\1\50\1\0\1"+
    "\50\1\0\10\52\5\50\1\0\2\50\2\0\4\50\1\0\1\50\6\0\1\50\1\0\3\50\1\0\1\50\1"+
    "\0\4\50\1\0\13\50\1\0\3\50\1\0\5\52\2\0\6\50\1\0\7\50\1\0\1\50\7\0\15\52\1"+
    "\0\1\52\1\0\2\52\1\0\2\52\1\0\1\52\3\50\5\0\3\52\5\0\3\50\7\52\4\0\2\50\1"+
    "\52\13\50\1\0\1\50\7\52\2\0\6\52\2\50\2\52\1\0\4\52\2\50\2\52\3\50\2\0\2\50"+
    "\1\52\6\50\3\52\2\0\11\50\3\52\1\50\6\0\2\52\6\50\4\52\2\50\2\0\2\52\1\50"+
    "\11\52\1\50\3\52\1\50\5\52\2\0\1\50\3\52\4\0\6\50\6\0\6\52\1\0\11\52\6\50"+
    "\3\52\1\50\2\52\1\50\7\52\2\50\2\52\2\0\2\52\1\50\3\52\1\0\10\50\2\0\2\50"+
    "\2\0\6\50\1\0\7\50\1\0\1\50\3\0\4\50\2\0\1\52\1\50\3\52\2\0\3\52\1\50\10\0"+
    "\1\52\4\0\2\50\1\0\1\50\1\0\3\52\1\0\6\50\4\0\2\50\1\0\2\50\1\0\2\50\1\0\2"+
    "\50\2\0\1\52\1\0\5\52\4\0\2\52\2\0\3\52\3\0\1\52\7\0\4\50\1\0\1\50\7\0\4\52"+
    "\3\50\1\52\2\0\1\50\1\0\2\50\1\0\3\50\2\52\1\0\3\52\2\0\1\50\11\0\1\52\1\50"+
    "\1\0\6\50\3\0\3\50\1\0\4\50\3\0\2\50\1\0\1\50\1\0\2\50\3\0\2\50\3\0\2\50\4"+
    "\0\5\52\3\0\3\52\1\0\4\52\2\0\1\50\6\0\5\52\1\0\5\50\3\0\1\50\7\52\1\0\2\52"+
    "\5\0\2\52\1\0\4\50\1\0\3\50\1\0\2\50\5\0\3\50\2\0\1\50\3\52\1\0\4\52\1\50"+
    "\5\0\3\50\1\52\7\0\1\50\2\0\2\52\1\0\7\50\1\0\1\50\4\0\1\52\4\0\6\52\1\0\1"+
    "\52\3\0\2\52\4\0\1\50\1\52\2\50\4\52\7\50\10\52\1\0\2\52\7\0\2\50\1\0\1\50"+
    "\2\0\2\50\1\0\1\50\2\0\1\50\6\0\4\50\1\0\3\50\1\0\1\50\1\0\1\50\2\0\2\50\1"+
    "\0\3\50\2\52\1\0\2\52\1\50\2\0\5\50\1\0\1\50\1\0\6\52\2\0\2\52\2\0\4\50\5"+
    "\0\1\52\1\0\1\52\1\0\1\52\4\0\2\52\5\50\10\52\11\0\1\52\1\0\7\52\1\50\2\52"+
    "\4\50\3\52\1\50\3\52\2\50\7\52\3\50\4\52\5\50\14\52\1\50\1\52\3\50\1\0\7\50"+
    "\2\0\3\52\2\50\3\52\3\0\2\50\2\52\4\0\1\50\1\0\2\52\4\0\4\50\10\52\3\0\1\50"+
    "\4\0\1\50\1\52\5\0\3\52\2\0\5\50\2\52\2\50\1\52\1\50\5\0\4\52\4\0\4\50\4\0"+
    "\5\52\3\50\3\0\10\52\5\50\2\52\3\0\3\50\3\52\1\0\5\52\4\50\1\52\4\50\3\52"+
    "\2\50\2\0\1\50\1\0\1\50\1\0\1\50\1\0\1\50\2\0\3\50\1\0\6\50\2\0\2\50\1\0\1"+
    "\52\3\0\4\52\11\0\1\50\4\0\1\50\1\0\5\50\2\0\1\50\1\0\4\50\1\0\3\50\2\0\4"+
    "\50\5\0\5\50\4\0\1\50\4\0\4\50\3\52\2\50\5\0\2\52\2\0\3\50\6\52\1\0\3\50\1"+
    "\52\3\50\1\52\4\50\1\52\4\50\3\0\1\50\1\0\1\50\2\0\5\50\1\52\2\50\2\52\5\50"+
    "\1\0\4\50\2\52\4\0\1\50\3\52\2\50\1\52\5\50\2\52\3\0\3\50\4\0\3\50\2\52\2"+
    "\0\6\50\1\0\3\52\1\0\2\52\5\0\5\50\5\0\1\50\1\52\3\50\1\0\2\50\1\0\2\50\6"+
    "\0\2\50\2\0\3\50\3\0\3\50\1\0\2\50\1\0\1\50\5\0\1\52\2\0\1\50\3\0\1\50\2\0"+
    "\4\50\1\0\2\50\2\0\1\50\3\52\1\0\2\52\1\0\5\50\2\52\1\0\3\50\1\52\2\0\1\50"+
    "\1\0\1\52\4\50\5\0\3\52\3\0\2\52\1\50\1\0\1\50\3\0\4\52\2\50\1\0\1\50\1\52"+
    "\3\0\1\50\3\0\2\50\3\0\3\52\2\0\6\52\2\50\3\0\2\52\6\0\5\52\3\0\6\52\2\0\3"+
    "\52\2\0\4\52\4\0\1\50\2\0\2\50\2\0\4\50\1\0\4\50\1\0\1\50\1\0\6\50\2\0\5\50"+
    "\1\0\4\50\1\0\4\50\2\0\2\52\4\0\1\52\3\0\1\52\2\0\7\52\1\0\2\52\1\0\2\52\1"+
    "\0\1\50\1\0\1\50\5\0\1\50\1\0\1\50\1\0\3\50\1\0\3\50\1\0\3\50");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\2\1\4\2\1\13\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\5\4\2\1\20\1\21\1\0\1\22"+
    "\1\0\5\5\1\23\7\5\3\2\2\21\13\5\1\24"+
    "\1\5\1\25\1\2\2\21\1\2\3\5\1\26\1\5"+
    "\1\27\7\5\1\21\1\0\4\5\1\30\1\5\1\31"+
    "\4\5\1\32\1\5\1\33\1\5\1\34\1\5\1\35"+
    "\5\5\1\36\1\5\1\37\1\40\1\41\1\5\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\130\0\130\0\130\0\130"+
    "\0\130\0\130\0\130\0\130\0\130\0\u0370\0\u039c\0\u03c8"+
    "\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u0134\0\130\0\u0160"+
    "\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u01b8\0\u05ac\0\u05d8"+
    "\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738"+
    "\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u01b8\0\u09a0\0\u06e0"+
    "\0\u09cc\0\u09f8\0\334\0\u0790\0\u0a24\0\u0a50\0\u0a7c\0\u01b8"+
    "\0\u0aa8\0\u01b8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0"+
    "\0\u0bdc\0\130\0\u09f8\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u01b8"+
    "\0\u0cb8\0\u01b8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u01b8\0\u0d94"+
    "\0\u01b8\0\u0dc0\0\u01b8\0\u0dec\0\u01b8\0\u0e18\0\u0e44\0\u0e70"+
    "\0\u0e9c\0\u0ec8\0\u01b8\0\u0ef4\0\u01b8\0\u01b8\0\u01b8\0\u0f20"+
    "\0\u01b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\7\1\12\1\13\1\14\1\13\1\15\1\16\1\17"+
    "\1\13\1\20\2\13\1\21\1\22\1\13\1\23\4\13"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\6\1\37\1\13\1\3\1\6"+
    "\1\3\1\40\1\5\1\41\1\7\1\10\1\11\1\41"+
    "\1\42\24\43\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\41\1\34\1\35\2\41\1\37\1\43\1\3\1\41"+
    "\55\0\1\44\1\0\1\45\5\0\24\6\11\0\2\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\5\52\0\1\6"+
    "\1\0\1\6\5\0\24\6\11\0\2\6\1\0\1\6"+
    "\1\0\1\6\4\0\1\7\3\0\1\7\43\0\5\46"+
    "\1\47\46\46\6\50\1\47\45\50\1\0\1\6\1\0"+
    "\1\6\5\0\1\13\1\51\22\13\11\0\2\13\1\37"+
    "\1\13\1\37\1\6\1\0\1\6\1\0\1\6\5\0"+
    "\24\13\11\0\2\13\1\37\1\13\1\37\1\6\1\0"+
    "\1\6\1\0\1\6\5\0\4\13\1\52\17\13\11\0"+
    "\2\13\1\37\1\13\1\37\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\12\13\1\53\11\13\11\0\2\13\1\37"+
    "\1\13\1\37\1\6\1\0\1\6\1\0\1\6\5\0"+
    "\4\13\1\54\17\13\11\0\2\13\1\37\1\13\1\37"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\7\13\1\55"+
    "\1\56\13\13\11\0\2\13\1\37\1\13\1\37\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\1\57\23\13\11\0"+
    "\2\13\1\37\1\13\1\37\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\6\13\1\60\2\13\1\61\12\13\11\0"+
    "\2\13\1\37\1\13\1\37\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\3\13\1\62\6\13\1\63\11\13\11\0"+
    "\2\13\1\37\1\13\1\37\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\6\13\1\64\15\13\11\0\2\13\1\37"+
    "\1\13\1\37\1\6\1\0\1\6\1\0\1\6\5\0"+
    "\1\65\23\13\11\0\2\13\1\37\1\13\1\37\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\24\6\11\0\1\36"+
    "\1\66\1\0\1\6\1\0\1\6\11\0\24\37\11\0"+
    "\5\37\2\0\1\67\1\0\1\70\3\0\26\41\6\0"+
    "\1\41\2\0\2\41\1\0\1\41\1\0\1\41\1\0"+
    "\1\41\1\0\1\41\3\0\26\41\6\0\1\41\2\0"+
    "\2\41\1\0\1\41\1\0\1\41\1\0\1\41\1\0"+
    "\1\41\1\7\2\0\1\41\1\42\24\41\6\0\1\41"+
    "\2\0\2\41\1\0\1\41\1\0\1\41\1\0\1\41"+
    "\1\0\1\41\3\0\2\41\24\43\6\0\1\41\2\0"+
    "\2\43\1\37\1\43\1\37\1\41\2\44\1\0\51\44"+
    "\1\71\1\45\1\71\1\72\5\71\24\45\11\71\2\45"+
    "\1\71\1\45\1\71\1\45\1\0\1\6\1\0\1\6"+
    "\5\0\2\13\1\73\21\13\11\0\2\13\1\37\1\13"+
    "\1\37\1\6\1\0\1\6\1\0\1\6\5\0\3\13"+
    "\1\74\2\13\1\75\15\13\11\0\2\13\1\37\1\13"+
    "\1\37\1\6\1\0\1\6\1\0\1\6\5\0\6\13"+
    "\1\76\15\13\11\0\2\13\1\37\1\13\1\37\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\11\13\1\77\12\13"+
    "\11\0\2\13\1\37\1\13\1\37\1\6\1\0\1\6"+
    "\1\0\1\6\5\0\1\100\23\13\11\0\2\13\1\37"+
    "\1\13\1\37\1\6\1\0\1\6\1\0\1\6\5\0"+
    "\20\13\1\101\3\13\11\0\2\13\1\37\1\13\1\37"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\7\13\1\102"+
    "\14\13\11\0\2\13\1\37\1\13\1\37\1\6\1\0"+
    "\1\6\1\0\1\6\5\0\17\13\1\103\4\13\11\0"+
    "\2\13\1\37\1\13\1\37\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\11\13\1\104\12\13\11\0\2\13\1\37"+
    "\1\13\1\37\1\6\1\0\1\6\1\0\1\6\5\0"+
    "\13\13\1\105\10\13\11\0\2\13\1\37\1\13\1\37"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\4\13\1\106"+
    "\17\13\11\0\2\13\1\37\1\13\1\37\1\6\1\0"+
    "\1\6\1\0\1\6\5\0\17\13\1\107\4\13\11\0"+
    "\2\13\1\37\1\13\1\37\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\24\6\11\0\1\110\1\6\1\0\1\6"+
    "\1\0\1\6\1\44\1\67\1\0\1\67\3\44\26\67"+
    "\6\44\1\67\2\44\2\67\1\44\1\67\1\44\1\67"+
    "\1\71\1\70\1\71\1\111\3\71\26\70\6\71\1\70"+
    "\2\71\2\70\1\71\1\70\1\71\1\70\3\71\1\112"+
    "\51\71\1\113\1\71\1\114\5\71\24\45\11\71\2\45"+
    "\1\71\1\45\1\71\1\45\1\0\1\6\1\0\1\6"+
    "\5\0\3\13\1\115\20\13\11\0\2\13\1\37\1\13"+
    "\1\37\1\6\1\0\1\6\1\0\1\6\5\0\2\13"+
    "\1\116\21\13\11\0\2\13\1\37\1\13\1\37\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\20\13\1\117\3\13"+
    "\11\0\2\13\1\37\1\13\1\37\1\6\1\0\1\6"+
    "\1\0\1\6\5\0\7\13\1\120\4\13\1\121\7\13"+
    "\11\0\2\13\1\37\1\13\1\37\1\6\1\0\1\6"+
    "\1\0\1\6\5\0\12\13\1\122\11\13\11\0\2\13"+
    "\1\37\1\13\1\37\1\6\1\0\1\6\1\0\1\6"+
    "\5\0\6\13\1\123\15\13\11\0\2\13\1\37\1\13"+
    "\1\37\1\6\1\0\1\6\1\0\1\6\5\0\17\13"+
    "\1\124\4\13\11\0\2\13\1\37\1\13\1\37\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\10\13\1\125\13\13"+
    "\11\0\2\13\1\37\1\13\1\37\1\6\1\0\1\6"+
    "\1\0\1\6\5\0\21\13\1\126\2\13\11\0\2\13"+
    "\1\37\1\13\1\37\1\6\1\0\1\6\1\0\1\6"+
    "\5\0\22\13\1\127\1\13\11\0\2\13\1\37\1\13"+
    "\1\37\1\6\1\0\1\6\1\0\1\6\5\0\6\13"+
    "\1\130\15\13\11\0\2\13\1\37\1\13\1\37\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\20\13\1\131\3\13"+
    "\11\0\2\13\1\37\1\13\1\37\1\6\1\71\1\41"+
    "\1\71\1\111\3\71\26\70\6\71\1\70\2\71\2\70"+
    "\1\71\1\70\1\71\1\70\1\71\1\132\1\71\1\133"+
    "\50\71\1\0\1\6\1\0\1\6\5\0\4\13\1\134"+
    "\17\13\11\0\2\13\1\37\1\13\1\37\1\6\1\0"+
    "\1\6\1\0\1\6\5\0\12\13\1\135\11\13\11\0"+
    "\2\13\1\37\1\13\1\37\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\1\13\1\136\22\13\11\0\2\13\1\37"+
    "\1\13\1\37\1\6\1\0\1\6\1\0\1\6\5\0"+
    "\3\13\1\137\20\13\11\0\2\13\1\37\1\13\1\37"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\10\13\1\140"+
    "\13\13\11\0\2\13\1\37\1\13\1\37\1\6\1\0"+
    "\1\6\1\0\1\6\5\0\6\13\1\141\15\13\11\0"+
    "\2\13\1\37\1\13\1\37\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\12\13\1\142\11\13\11\0\2\13\1\37"+
    "\1\13\1\37\1\6\1\0\1\6\1\0\1\6\5\0"+
    "\5\13\1\143\16\13\11\0\2\13\1\37\1\13\1\37"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\7\13\1\144"+
    "\14\13\11\0\2\13\1\37\1\13\1\37\1\6\1\0"+
    "\1\6\1\0\1\6\5\0\11\13\1\145\12\13\11\0"+
    "\2\13\1\37\1\13\1\37\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\7\13\1\146\14\13\11\0\2\13\1\37"+
    "\1\13\1\37\1\6\1\0\1\6\1\0\1\6\5\0"+
    "\5\13\1\147\16\13\11\0\2\13\1\37\1\13\1\37"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\4\13\1\150"+
    "\17\13\11\0\2\13\1\37\1\13\1\37\1\6\1\0"+
    "\1\6\1\0\1\6\5\0\6\13\1\151\15\13\11\0"+
    "\2\13\1\37\1\13\1\37\1\6\1\0\1\6\1\0"+
    "\1\6\5\0\17\13\1\152\4\13\11\0\2\13\1\37"+
    "\1\13\1\37\1\6\1\0\1\6\1\0\1\6\5\0"+
    "\7\13\1\153\14\13\11\0\2\13\1\37\1\13\1\37"+
    "\1\6\1\0\1\6\1\0\1\6\5\0\1\154\23\13"+
    "\11\0\2\13\1\37\1\13\1\37\1\6\1\0\1\6"+
    "\1\0\1\6\5\0\12\13\1\155\11\13\11\0\2\13"+
    "\1\37\1\13\1\37\1\6\1\0\1\6\1\0\1\6"+
    "\5\0\7\13\1\156\14\13\11\0\2\13\1\37\1\13"+
    "\1\37\1\6\1\0\1\6\1\0\1\6\5\0\12\13"+
    "\1\157\11\13\11\0\2\13\1\37\1\13\1\37\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\5\13\1\160\16\13"+
    "\11\0\2\13\1\37\1\13\1\37\1\6\1\0\1\6"+
    "\1\0\1\6\5\0\7\13\1\161\14\13\11\0\2\13"+
    "\1\37\1\13\1\37\1\6\1\0\1\6\1\0\1\6"+
    "\5\0\3\13\1\162\20\13\11\0\2\13\1\37\1\13"+
    "\1\37\1\6\1\0\1\6\1\0\1\6\5\0\5\13"+
    "\1\163\16\13\11\0\2\13\1\37\1\13\1\37\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\5\13\1\164\16\13"+
    "\11\0\2\13\1\37\1\13\1\37\1\6\1\0\1\6"+
    "\1\0\1\6\5\0\15\13\1\165\6\13\11\0\2\13"+
    "\1\37\1\13\1\37\1\6\1\0\1\6\1\0\1\6"+
    "\5\0\15\13\1\166\6\13\11\0\2\13\1\37\1\13"+
    "\1\37\1\6\1\0\1\6\1\0\1\6\5\0\17\13"+
    "\1\167\4\13\11\0\2\13\1\37\1\13\1\37\1\6"+
    "\1\0\1\6\1\0\1\6\5\0\3\13\1\170\20\13"+
    "\11\0\2\13\1\37\1\13\1\37\1\6\1\0\1\6"+
    "\1\0\1\6\5\0\17\13\1\171\4\13\11\0\2\13"+
    "\1\37\1\13\1\37\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3916];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\21\1\11\11\10\1\1\0\1\11\1\0"+
    "\61\1\1\11\1\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QmlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 35: break;
          case 2: 
            { return VALUE;
            } 
            // fall through
          case 36: break;
          case 3: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 37: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 38: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 39: break;
          case 6: 
            { return LBRACE;
            } 
            // fall through
          case 40: break;
          case 7: 
            { return RBRACE;
            } 
            // fall through
          case 41: break;
          case 8: 
            { return LBRACKET;
            } 
            // fall through
          case 42: break;
          case 9: 
            { return RBRACKET;
            } 
            // fall through
          case 43: break;
          case 10: 
            { return LPAREN;
            } 
            // fall through
          case 44: break;
          case 11: 
            { return RPAREN;
            } 
            // fall through
          case 45: break;
          case 12: 
            { yybegin(PROPERTYVALUE); return COLON;
            } 
            // fall through
          case 46: break;
          case 13: 
            { return SEMICOLON;
            } 
            // fall through
          case 47: break;
          case 14: 
            { return COMMA;
            } 
            // fall through
          case 48: break;
          case 15: 
            { return INTEGER;
            } 
            // fall through
          case 49: break;
          case 16: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 50: break;
          case 17: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 51: break;
          case 18: 
            { return STRING;
            } 
            // fall through
          case 52: break;
          case 19: 
            { return KEYWORD_AS;
            } 
            // fall through
          case 53: break;
          case 20: 
            { return KEYWORD_VAR;
            } 
            // fall through
          case 54: break;
          case 21: 
            { return FLOAT;
            } 
            // fall through
          case 55: break;
          case 22: 
            { return KEYWORD_REAL;
            } 
            // fall through
          case 56: break;
          case 23: 
            { return TRUE;
            } 
            // fall through
          case 57: break;
          case 24: 
            { return KEYWORD_ALIAS;
            } 
            // fall through
          case 58: break;
          case 25: 
            { return FALSE;
            } 
            // fall through
          case 59: break;
          case 26: 
            { return KEYWORD_IMPORT;
            } 
            // fall through
          case 60: break;
          case 27: 
            { return KEYWORD_PRAGMA;
            } 
            // fall through
          case 61: break;
          case 28: 
            { return KEYWORD_SIGNAL;
            } 
            // fall through
          case 62: break;
          case 29: 
            { return KEYWORD_DOUBLE;
            } 
            // fall through
          case 63: break;
          case 30: 
            { return KEYWORD_DEFAULT;
            } 
            // fall through
          case 64: break;
          case 31: 
            { return KEYWORD_PROPERTY;
            } 
            // fall through
          case 65: break;
          case 32: 
            { return KEYWORD_READONLY;
            } 
            // fall through
          case 66: break;
          case 33: 
            { return KEYWORD_FUNCTION;
            } 
            // fall through
          case 67: break;
          case 34: 
            { return KEYWORD_SINGLETON;
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
